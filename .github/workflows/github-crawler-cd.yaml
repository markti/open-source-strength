name: Terraform

on:
  push:
    branches:
      - main
    paths:
      - 'src/terraform/**'
      - '.github/workflows/**'
      - 'dotnet/GitHubCrawler/**'

env:
  WORKING_DIRECTORY: "src/terraform/"
  APPLICATION_NAME: "oss"
  ENVIRONMENT_NAME: "dev"

jobs:
  build:

    name: build-${{matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dependencies
      run: dotnet restore
      working-directory: ./src/dotnet/GitHubCrawler
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      working-directory: ./src/dotnet/GitHubCrawler
      
    - name: Test
      run: dotnet test --no-restore --verbosity normal
      working-directory: ./src/dotnet/GitHubCrawler
      
    - name: Publish
      run: |
        dotnet publish -c Release -o ./publish
        zip -r ./deployment.zip ./publish
      working-directory: ./src/dotnet/GitHubCrawler

    - name: Upload Deployment Package
      uses: actions/upload-artifact@v2
      with:
        name: github-crawler-deployment
        path: ./src/dotnet/GitHubCrawler/deployment.zip

  terraform:
    runs-on: ubuntu-latest
    outputs:
      github_crawler_function_name: ${{ steps.Apply.outputs.output1 }}
    steps:
    - uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.5 

    - name: Apply
      env: 
        ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
        ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        BACKEND_RESOURCE_GROUP_NAME: ${{ vars.BACKEND_RESOURCE_GROUP_NAME }}
        BACKEND_STORAGE_ACCOUNT_NAME: ${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}
        BACKEND_STORAGE_CONTAINER_NAME: ${{ vars.BACKEND_STORAGE_CONTAINER_NAME }}
        TF_BACKEND_KEY: ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT_NAME }}
        ENV_VAR_FILE_PATH: "./env/${{ env.ENVIRONMENT_NAME }}.tfvars"
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        terraform init \
          -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP_NAME" \
          -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME" \
          -backend-config="container_name=$BACKEND_STORAGE_CONTAINER_NAME" \
          -backend-config="key=$TF_BACKEND_KEY"
        terraform apply -var-file=$ENV_VAR_FILE_PATH -auto-approve

        temp1=$(terraform output github_crawler_function_name | tr -d '"')
        echo 'hello temp1'
        
  deploy:
    needs: [terraform, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Deploy
        env:
          OUTPUT1: ${{needs.terraform.outputs.github_crawler_function_name}}
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          echo 'Hello World!'$OUTPUT1
